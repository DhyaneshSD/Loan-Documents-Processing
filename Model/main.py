# -*- coding: utf-8 -*-
"""LDP_main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_YZzGBtIGptCoSLvx6Ch-pyj5FOeJSeH

# Important Dependencies
"""



"""<h2>Defining GenAI Model(google gemini) and Importing Important Libraries</h2>"""

import pathlib
import textwrap
import PIL.Image
import fitz
import pymongo
from pymongo import MongoClient
import google.generativeai as genai
import os
import re
from IPython.display import display

from IPython.display import Markdown


def to_markdown(text):
  text = text.replace('â€¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

#from google.colab import userdata
import os
# Load environment variables from .env file

gemini_api_key = "AIzaSyAk_37sThZy4FAuGJDS1KnoSlR6XNgT8fI"

#gemini_api_key = os.environ.get('GEMINI_API_KEY')
#Gemini_key = gemini_api_key
GOOGLE_API_KEY= gemini_api_key

genai.configure(api_key=GOOGLE_API_KEY)

model = genai.GenerativeModel(model_name='gemini-1.5-flash',system_instruction="You are a professional document analyzer specializing in KYC and loan application verification. Given two text documents, extract the required personal information from both, compare the extracted data, and generate a detailed report highlighting any inconsistencies. Ensure the report is clear, concise, and emphasizes the critical nature of the discrepancies.")

"""<h2>** PULL User Docs from the Website**</h2>"""
KYC_Doc = None
Bank_Statment = None
Salary_slips = None
Loan_application_form = None
"""# Checking whether Doc is Image or PDF"""

def check_file_type(file_path):


  _, ext = os.path.splitext(file_path)
  if ext.lower() == '.pdf':
    return 'pdf'
  elif ext.lower() in ('.jpg', '.jpeg', '.png', '.gif', '.bmp'):
    return 'image'
  else:
    return 'unknown'

print(check_file_type("Filled_Loan_Application_Form.pdf"))

"""<h1>Fucntion to convert image into text with GenAI</h1>"""

import PIL.Image

def img_to_text(Image_path):
  img = PIL.Image.open(Image_path)
  #img = PIL.Image.open('new1.jpg')
  model = genai.GenerativeModel('gemini-1.5-flash')
  response = model.generate_content(["Extract only English text, preserving the original order. Handle numbers and dates as separate entities. Output should be a structured format, such as a list or dictionary, with clear labels for each extracted element.", img])
  return to_markdown(response.text)

text10=img_to_text("/Users/sudhirdikkar/Downloads/IMG_5092.jpg")
img_data1 = text10.data.strip()
img_data1

"""<h1>Fucntion to convert PDF docs into Text with GenAI</h1>"""


import fitz


def extract_text_from_pdf(pdf_path):
    """Extracts text from a PDF and (optionally) corrects it using the Gemini API.

    Args:
        pdf_path: The path to the PDF file.

    Returns:
        The extracted text (possibly corrected) as a string.
    """

    try:
        # Open the PDF file
        document = fitz.open(pdf_path)

        # Initialize an empty string to hold the extracted text
        text = ""

        # Iterate through each page in the PDF
        for page_num in range(len(document)):
            page = document.load_page(page_num)  # Load the page
            text += page.get_text()  # Extract the text from the page

        # Close the document
        document.close()

        # (Optional) Correct the text using the Gemini API
        corrected_text = correct_text_with_gemini(text)  # Assuming a separate function

        return corrected_text
    except Exception as e:
        print(f"Error extracting text: {e}")
        return ""


def correct_text_with_gemini(text):
    """
    Args:
        text: The text to be corrected.

    Returns:
        The corrected text as a string.
    """
    model = genai.GenerativeModel('gemini-1.5-flash')
    response = model.generate_content(["Extract key information from the provided financial document (loan application, bank statement, or salary slip). Identify and extract relevant data points such as name, account number, date, amount, transaction details, and any other pertinent information. Structure the extracted data in a clear and organized format, such as a dictionary or list. Prioritize accuracy and completeness in the extraction process.", text])
    return response


#example ---
pdf_c=extract_text_from_pdf("/Users/sudhirdikkar/Downloads/LDP_f1.pdf")

pdf_c.text




"""# Extracting Important details from KYC Document"""

import re

def extract_pan_card_details76(text):
    """Extracts PAN card details and other information from the given text.

    Args:
        text: The input text, potentially in JSON format.

    Returns:
        A dictionary containing the extracted information, including:
            PAN: The PAN number (or "PAN not found").
            First Name: The first name (or "First name not found").
            Middle Name: The middle name (or an empty string).
            Last Name: The last name (or an empty string).
            Father's Name: The father's full name (or "Father's Name not found").
            Date of Birth: The date of birth (or an empty string).
    """

    # Remove unnecessary characters and split the text into lines
    text = re.sub(r'^json\n>', '', text)  # Remove leading 'json\n>'
    text = re.sub(r'>\n>', '', text)     # Remove trailing '>\n>'
    text = re.sub(r'\n>', '\n', text)    # Replace '\n>' with newline
    lines = text.split('\n')

    # Initialize variables for extracted information
    pan_number = "PAN not found"
    full_name_english = "Name not found"
    father_full_name_english = "Father's Name not found"
    date_of_birth = ""

    # Iterate over lines to extract information
    for line in lines:
        line = line.strip().strip(',')  # Remove leading/trailing spaces and commas

        # Check for keywords and extract PAN number using a single pattern
        pan_keywords = ["Permanent Account Number Card", "Card Number", "PAN"]
        for keyword in pan_keywords:
            if keyword in line:
                match = re.search(r'([A-Z]{5}[0-9]{4}[A-Z])', line)  # Look for 10 digits
                if match:
                    pan_number = match.group(1)
                    break  # Stop searching for PAN after finding it

        # Extract other information using specific keywords
        if '"Name"' in line:
            full_name_english = re.sub(r'^.*: ', '', line).strip('"').strip(',')
        elif '"Father\'s Name"' in line:
            father_full_name_english = re.sub(r'^.*: ', '', line).strip('"').strip(',')
        elif '"Date of Birth"' in line:
            date_of_birth = re.sub(r'^.*: ', '', line).strip('"').strip(',')

    # Split the name into first name, middle name, and last name
    name_parts = full_name_english.split()
    first_name = name_parts[0] if len(name_parts) > 0 else "First name not found"
    last_name = name_parts[-1] if len(name_parts) > 1 else ""
    middle_name = ' '.join(name_parts[1:-1]) if len(name_parts) > 2 else ""

    # Return the extracted information as a dictionary
    return {
        "PAN": pan_number,
        "First Name": first_name,
        "Middle Name": middle_name,
        "Last Name": last_name,
        "Father's Name": father_full_name_english,
        "Date of Birth": date_of_birth
    }


#example ---
extracted_data = extract_pan_card_details76(img_data1)
print(extracted_data)

img_data1

img_c1 = extracted_data




"""<h2>Main Model To Process the Documents</h2>"""

#generate_response=model.generate_content("You have given the documnet information of the user you have to give me Inconsitencies and Discrepencies in the document as a Loan document Analyzer."+ final_text)
#print(generate_response.text)

Final_Analysis =model.generate_content("Analyze two text documents, a KYC document and a loan application, for inconsistencies in personal information, financial aspects and overall inconsistencies as a Loan Analyzer. Extract the following details from both documents: name, father's name, date of birth, and PAN number. Compare the extracted data and generate a detailed report highlighting any discrepancies found. Present the report in a clear and structured format, emphasizing the importance of each inconsistency."+str(img_c1) +str(pdf_c ))

# just to show case output no need to print in actual

print(Final_Analysis.text)

#push this output to the website output is (Final_Analysis)

"""<h1>Connecting to MongoDB or SQL</h2>"""
